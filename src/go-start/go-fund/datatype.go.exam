package main

import (
	"fmt"
)

func _func_arr_() {
	var arr [n] type
	var arr1[10] int
	arr[0] = 42
	arr[1] = 13
	fmt.Printf("first %d\n",arr[0])
	a := [3]int{1,2,3}
	b := [10]int{1,2,3}
	c :=[...]int{1,2,3}//自动计算个数//TODO:map
	doubleArray := [2][4]int {int{1,2,3,4}, [4]int{5,6,7,8}}
}

func _func_slice_ () {
	//slice 动态数组,引用类型，执行底层array
	var fslice []int
	slice := []byte{'a','b'}
	a := [10]int{1,2,3,4,5,6,7,8,9,10}
	var slice []int
	slice = a[:]
	/*slice内值函数
	len 获取长度
	cap 获取最大容量
	append 追加一个或多个元素，返回一个 和 slice 类型一样的slice
	copy 从 源 slice src 中复制元素到目标 dst，返回复制的元素个数
	*/

}

func _func_map_() {
	// map，字典的概念。 map[keyType]valueType
	// map 无序，长度不固定，**引用类型**，len(map)返回 key 数量，map 值可以修改。
	// map和其他基本类型不同，不是 thread-safe，多个 go-routine 存取用 mutex lock#TODO:map非thread-safe

	//var numbers map[string]int
	numbers:= make(map[string]int)
	numbers["one"] = 1
	numbers["ten"] = 10
	fmt.Println("one is",numbers["three"]) // 0

	rating := map[string]float32{"c":5,"Go":4.5}

	goRaking,ok := rating["Go"]
	if ok {
		fmt.Println(goRaking)
	} else {
		fmt.Println("no going")
	}
	delete(rating,c)
}

func _func_make_ () {
	/*make 只能用于 内建类型(map/slice/chanell)的内存分配, new 用于各种类型，new 返回指针。 make 返回初始化后的（非零）值。*/
	//int ,int8,int32,int64 0
	//uint 0x0
	//rune 0
	//byte 0x0
	//float32,float64 0
	//bool false
	//string ""

}
func main() {
	_func_map_()
}
