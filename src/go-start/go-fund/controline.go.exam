package main

import "fmt"
import "file"

func _func_if_() {
	if true {

	} else {

	}
	if x := 10; x < 10 {

	} else {

	}
	x := 3
	if x == 3 {

	} else if x < 3 {

	} else {

	}
}

func _func_for_() {
	sum := 0
	for idx := 0; idx < 10; idx++ {
		sum += idx
	}
	sum = 1
	for sum < 1000 {
		sum += sum
	}

	for k, v := range map[string]int{"a": 1, "b": 2} {
		fmt.Println(k, v)
	}

	i := 6
	switch i {
	case 4:
		fmt.Println(4)

		//fallthrough
	}
}

func funcName(a int, b string) (c int, d string) {
	return a, b
}

func max(a, b int) (add int, Multiplied int) {
	add = a + b
	Multiplied = a * b
	return
}

func myFunc(arg ...int) {
	for _, n := range arg {
		fmt.Printf("Add the numbers: %d\n", n)
	}
} //arg 是一个slice

func add(a int) int {
	a = a + 1
	return a
}

func add_p(a *int) int {
	*a = *a + 1
	return *a
	/*
		传递指针使得多个函数能够操作同一个对象
		传指针比较轻量级（8bytes），只是传内存地址，可以用指针传递大结构体。
		GO中 channel, slice，map 实现机制类似指针，可以直接传递，而不用取地址。（如果需要修改 slice 长度让需要取地址）
	*/
}

func ReadWrite() bool {
	file.Open("file")
	defer file.Close()
	if false {
		return false
	}
	if true {
		return false
	}
	return true
}
func main() {

}
